name: CI Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  lint:
    name: Code Linting and Type Checking
    permissions:
      contents: write
    environment: CI Yandex Practicum
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
      - name: Code checkout
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install autopep8 isort autoflake flake8 mypy flake8-html

      - name: Run autoflake to remove unused imports/variables
        run: |
          autoflake --in-place --remove-all-unused-imports --remove-unused-variables --recursive .

      - name: Run isort to sort imports
        run: |
          isort .

      - name: Run autopep8 to format code
        run: |
          autopep8 . --recursive --in-place --pep8-passes 2000 --verbose

      - name: Lint with flake8
        run: |
          flake8 . --config=setup.cfg --exit-zero --format=html --htmldir=flake8-report/

      - name: Type check with mypy
        run: |
          mypy . --config-file setup.cfg

      - name: Upload HTML linting report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: flake8-report
          path: flake8-report/

      - name: Commit and push changes if any files were modified (only on push to main)
        if: github.ref == 'refs/heads/main' && success()
        run: |
          git config --local user.name "GitHub Actions"
          git config --local user.email "actions@github.com"
          git add .
          git diff-index --quiet HEAD || git commit -m "Auto-formatted code with autoflake, isort, autopep8"
          git pull origin main --rebase
          git push origin main

      - name: Send success message to Telegram
        if: success()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{secrets.TELEGRAM_BOT_TOKEN}}/sendMessage \
            -d chat_id=${{secrets.TELEGRAM_CHAT_ID}} \
            -d text="CI Pipeline passed successfully on Python ${{ matrix.python-version }}!"
